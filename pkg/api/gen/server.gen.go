// Package gen provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package gen

import (
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List of all keys
	// (GET /admin/keys)
	AdminGetKeys(ctx echo.Context) error
	// Set API key info
	// (PUT /admin/keys)
	AdminSetKey(ctx echo.Context) error
	// Delete API key
	// (DELETE /admin/keys/{apiKeyID})
	AdminDeleteKey(ctx echo.Context, apiKeyID string) error
	// Display API key info
	// (GET /admin/keys/{apiKeyID})
	AdminGetKey(ctx echo.Context, apiKeyID string) error
	// Get logging level
	// (GET /log/level)
	GetLogLevel(ctx echo.Context) error
	// Set logging level
	// (PUT /log/level)
	SetLogLevel(ctx echo.Context) error
	// Get time zone
	// (GET /timezone)
	GetTimeZone(ctx echo.Context) error
	// Set time zone
	// (PUT /timezone)
	SetTimeZone(ctx echo.Context) error
	// Get a JWT token
	// (GET /token)
	GetToken(ctx echo.Context, params GetTokenParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AdminGetKeys converts echo context to params.
func (w *ServerInterfaceWrapper) AdminGetKeys(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	ctx.Set("apiKeyAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AdminGetKeys(ctx)
	return err
}

// AdminSetKey converts echo context to params.
func (w *ServerInterfaceWrapper) AdminSetKey(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	ctx.Set("apiKeyAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AdminSetKey(ctx)
	return err
}

// AdminDeleteKey converts echo context to params.
func (w *ServerInterfaceWrapper) AdminDeleteKey(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "apiKeyID" -------------
	var apiKeyID string

	err = runtime.BindStyledParameter("simple", false, "apiKeyID", ctx.Param("apiKeyID"), &apiKeyID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter apiKeyID: %s", err))
	}

	ctx.Set("bearerAuth.Scopes", []string{""})

	ctx.Set("apiKeyAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AdminDeleteKey(ctx, apiKeyID)
	return err
}

// AdminGetKey converts echo context to params.
func (w *ServerInterfaceWrapper) AdminGetKey(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "apiKeyID" -------------
	var apiKeyID string

	err = runtime.BindStyledParameter("simple", false, "apiKeyID", ctx.Param("apiKeyID"), &apiKeyID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter apiKeyID: %s", err))
	}

	ctx.Set("bearerAuth.Scopes", []string{""})

	ctx.Set("apiKeyAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AdminGetKey(ctx, apiKeyID)
	return err
}

// GetLogLevel converts echo context to params.
func (w *ServerInterfaceWrapper) GetLogLevel(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	ctx.Set("apiKeyAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLogLevel(ctx)
	return err
}

// SetLogLevel converts echo context to params.
func (w *ServerInterfaceWrapper) SetLogLevel(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	ctx.Set("apiKeyAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetLogLevel(ctx)
	return err
}

// GetTimeZone converts echo context to params.
func (w *ServerInterfaceWrapper) GetTimeZone(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	ctx.Set("apiKeyAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTimeZone(ctx)
	return err
}

// SetTimeZone converts echo context to params.
func (w *ServerInterfaceWrapper) SetTimeZone(ctx echo.Context) error {
	var err error

	ctx.Set("bearerAuth.Scopes", []string{""})

	ctx.Set("apiKeyAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetTimeZone(ctx)
	return err
}

// GetToken converts echo context to params.
func (w *ServerInterfaceWrapper) GetToken(ctx echo.Context) error {
	var err error

	ctx.Set("apiKeyAuth.Scopes", []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTokenParams
	// ------------- Optional query parameter "role" -------------

	err = runtime.BindQueryParameter("form", true, false, "role", ctx.QueryParams(), &params.Role)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter role: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetToken(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/admin/keys", wrapper.AdminGetKeys)
	router.PUT("/admin/keys", wrapper.AdminSetKey)
	router.DELETE("/admin/keys/:apiKeyID", wrapper.AdminDeleteKey)
	router.GET("/admin/keys/:apiKeyID", wrapper.AdminGetKey)
	router.GET("/log/level", wrapper.GetLogLevel)
	router.PUT("/log/level", wrapper.SetLogLevel)
	router.GET("/timezone", wrapper.GetTimeZone)
	router.PUT("/timezone", wrapper.SetTimeZone)
	router.GET("/token", wrapper.GetToken)

}

